built_layers <- list()
built_layers[[1]] <- in_layer_merge(dmrs = layers[[1]], CG_table = atomic_layer, FDR_scaler = fdrscaler, lookup_table = cltable)
for(i in 2:length(layers)){
print(i)
built_layers[[i]] <- build_next_layer(prev_layer = built_layers[[i-1]],
windows_to_layer = layers[[i]],
CG_table = atomic_layer,
FDR_scaler=fdrscaler,
lookup_table = cltable)
print("done with one")
}
layers
built_layers
layers
built_layers
clear
clear()
built_layers
built_layers <- list()
built_layers[[1]] <- in_layer_merge(dmrs = layers[[1]], CG_table = atomic_layer, FDR_scaler = fdrscaler, lookup_table = cltable)
i=2
prev_layer = built_layers[[i-1]]
windows_to_layer = layers[[i]]
CG_table = atomic_layer
FDR_scaler=fdrscaler
lookup_table = cltable
## assume layer below is non_overlapping non_adjacent windows
## for each DMR object (i.e. windows_to_layer)
## nrow(windows_to_layer)  == number of DMR objects
keep <- rep(FALSE,nrow(windows_to_layer))
for(i in 1:nrow(windows_to_layer)){
#print(i)
window<-windows_to_layer[i,]
overlaps <- bnl_build_overlaps(window = window, prev_layer=prev_layer) ## returns list of overlaps
max_overlap <- bnl_select_max_scoring_overlap(overlaps=overlaps, CG_table=CG_table, FDR_scaler = FDR_scaler)
rescore <- bnl_rescore_wo_max_overlap(window=window, max_overlap = max_overlap, CG_table=CG_table, FDR_scaler = FDR_scaler)
rescore
is_sig <- bnl_check_significance(score = rescore, lookup_table = lookup_table, num_cg = (window$numCG-length(max_overlap)))
if(is_sig){
keep[i] <- TRUE
}
}
keep
kept <- windows_to_layer[which(keep),]
kept
kept_merged <- in_layer_merge(dmrs=kept, CG_table = CG_table, FDR_scaler = FDR_scaler, lookup_table = lookup_table)
kept_merged
kept_expanded <- expand_bounds(lower=prev_layer, upper=kept_merged, CG_table = CG_table,
FDR_scaler = FDR_scaler, lookup_table = lookup_table)
kept_expanded
View(kept_expanded)
View(kept_merged)
prev_unchanged <- prev_layer[!bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]
prev_unchanged
window = kept_expanded
prev_layer=prev_layer
which_overlap <- rep(0, nrow(prev_layer))
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
which_overlap
prev_layer[which_overlap,]
prev_layer[which(which_overlap),]
prev_layer[which(which_overlap==1),]
document()
install("../dmrscaler")
prev_unchanged <- prev_layer[!bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]  ## which in the previous layer don't overlap anythign
document()
install("../dmrscaler")
prev_unchanged <- prev_layer[!bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]  ## which in the previous layer don't overlap anythign
prev_unchanged
prev_layer
bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer )
prev_layer[!bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]
prev_layer[-bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]
prev_layer[bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]
winodw
window
prev_layer
which_overlap <- rep(0, nrow(prev_layer))
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(prev_layer$chr == window$chr)
& (prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
warnings()
overlaps_any <- which(
(prev_layer$chr == window$chr[i])
& (prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
)
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(prev_layer$chr == window$chr[i])
& (prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
which_overlap
document()
install("../dmrscaler")
prev_unchanged <- prev_layer[-bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]  ## which in the previous layer don't overlap anything, note minus sign
prev_unchanged
prev_unchanged <- prev_layer[bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]  ## which in the previous layer don't overlap anything, note minus sign
prev_unchanged
kept_expanded
prev_layer[-bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]
-bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer )
bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer )
window = kept_expanded
prev_layer=prev_layer
prev_layer
View(window)
which_overlap <- rep(0, nrow(prev_layer))
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(prev_layer$chr == window$chr[i])
& (prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
which_overlap
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]))
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
overlaps_any
which_overlap <- rep(0, nrow(prev_layer))
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]))
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
which_overlap
i
i=10
prev_layer$chr == window$chr[i]
which(
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]))
)
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]))
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]))
((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]))
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]))
(prev_layer$chr == window$chr[i])
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]))
(prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )
(prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i])   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
(prev_layer$chr == window$chr[i])
c(T,T,T])
c(T,T,T)
c(T,T,T) & c(T,T,T)
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
which(
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
)
which(
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
)
which_overlap <- rep(0, nrow(prev_layer))
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(prev_layer$chr == window$chr[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
which_overlap
View(prev_layer)
prev_layer$chr
window$chr
window$chr[3]
window$chr[4]
which_overlap <- rep(0, nrow(prev_layer))
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(as.character(prev_layer$chr) == as.character(window$chr[i]))
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
which_overlap
(as.character(prev_layer$chr) == as.character(window$chr[i]))
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
(prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i])
(prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )
(prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )
window = kept_expanded
prev_layer=prev_layer
which_overlap <- rep(0, nrow(prev_layer))
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(as.character(prev_layer$chr) == as.character(window$chr[i]))
& ((prev_layer$start_index <= window$start_index[i] & prev_layer$stop_index >= window$stop_index[i] )   ## prev layer completely covers window
| (prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )  ## prev layer overlaps left window
| (prev_layer$start_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] ) ## window completely covers prev layer
| (prev_layer$start_index >= window$start_index[i] & prev_layer$start_index <= window$stop_index[i]) )
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
(prev_layer$stop_index >= window$start_index[i] & prev_layer$stop_index <= window$stop_index[i] )
window
prev_layers
prev_layer
window
prev_layer
i
nrow(windows)
nrow(window)
which_overlap <- rep(0, nrow(prev_layer))
for( i in 1:nrow(prev_layer)){
overlaps_any <- which(
(as.character(prev_layer$chr[i]) == as.character(window$chr))
& ((prev_layer$start_index[i] <= window$start_index & prev_layer$stop_index[i] >= window$stop_index )   ## prev layer completely covers window
| (prev_layer$stop_index[i] >= window$start_index & prev_layer$stop_index[i] <= window$stop_index )  ## prev layer overlaps left window
| (prev_layer$start_index[i] >= window$start_index & prev_layer$stop_index[i] <= window$stop_index ) ## window completely covers prev layer
| (prev_layer$start_index[i] >= window$start_index & prev_layer$start_index[i] <= window$stop_index) )
)
if(length(overlaps_any) != 0 ){ which_overlap[i] <- 1}
}
which_overlap
document()
install("../dmrscaler")
prev_layer
prev_layer[-bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]
prev_layer[bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]
prev_unchanged <- prev_layer[-bnl_which_overlap(window = kept_expanded, prev_layer=prev_layer ),]  ## which in the previous layer don't overlap anything, note minus sign
kept_expanded <- rbind(kept_expanded, prev_unchanged)
kept_expanded
built_layers <- list()
built_layers[[1]] <- in_layer_merge(dmrs = layers[[1]], CG_table = atomic_layer, FDR_scaler = fdrscaler, lookup_table = cltable)
for(i in 2:length(layers)){
print(i)
built_layers[[i]] <- build_next_layer(prev_layer = built_layers[[i-1]],
windows_to_layer = layers[[i]],
CG_table = atomic_layer,
FDR_scaler=fdrscaler,
lookup_table = cltable)
print("done with one")
}
View(built_layers)
View(built_layers[[4]])
rim<-dmrscaler::generate_rand_index_matrix(num_controls = length( which(pdat$Sample_Group=="CONTROL" & !grepl("-2",pdat$Sample_Name))),
num_cases = length( which(pdat$Sample_Group=="Patient" & !grepl("-2",pdat$Sample_Name))),
num_permutations = 20)
load(file="/home/lbondhus/Desktop/PROJECTS/KAT6A_DNA_methylation_project/intermediate_data/GRset.funnorm_NEW.Rdata")
pdat<- pData(GRset.funnorm)
B<-getBeta(GRset.funnorm)
locs<-mapToGenome(GRset.funnorm)
locs<-locs@rowRanges
Bsmall<-B[1:1e5,]
locsmall <- locs[1:1e5,]
locsmall<-as.data.frame(cbind(as.character(locsmall@ranges@NAMES),as.numeric(as.character(locsmall@ranges@start)),as.character(locsmall@seqnames)))
colnames(locsmall)<-c("names", "pos", "chr")
data<-data.frame(row.names = locsmall$names )
data$chr <- locsmall$chr
data$pos <- locsmall$pos
rim<-dmrscaler::generate_rand_index_matrix(num_controls = length( which(pdat$Sample_Group=="CONTROL" & !grepl("-2",pdat$Sample_Name))),
num_cases = length( which(pdat$Sample_Group=="Patient" & !grepl("-2",pdat$Sample_Name))),
num_permutations = 20)
mrp<-dmrscaler::run_MWW_rand_permutation(index_matrix = rim, Beta=Bsmall, num_permutations = 20)
mrp<- -log10(mrp)
mwr<-dmrscaler::run_MWW(control_indices = which(pdat$Sample_Group=="CONTROL" & !grepl("-2",pdat$Sample_Name)),
case_indices = which(pdat$Sample_Group=="Patient" & !grepl("-2",pdat$Sample_Name)),
Beta = Bsmall)
mwr<- -log10(mwr)
fdt<-dmrscaler::write_FDR_table(real_table = mwr, rand_table = mrp)
fdrscaler<-dmrscaler::get_FDR_scalar(MWW_FDR_table = fdt, MWW_FDR_threshold = 0.1)
cltable <- dmrscaler::write_CLT_lookup_table(num_reps = 1e5, data_to_sample = mwr$p_val, FDR_scaler = fdrscaler)
##------ Wed Mar  4 14:50:48 2020 ------##
##------ Wed Mar  4 14:52:21 2020 ------##
data<-data.frame(row.names = locsmall$names )
data$chr <- locsmall$chr
data$pos <- locsmall$pos
data$scoring_value <- mwr$p_val
### this is the part that will run in tandem or parallel
nn <- dmrscaler::n_nearest_window_scoring_func(indat = data, n_nearest = 4, step_size = 2, FDR = fdrscaler)
signn <- dmrscaler::determine_significant_windows(window_results=nn, indat=data, quants=cltable)
signn <- dmrscaler::add_significance(three_window_list =  signn, lookup_table = cltable)
###
layer_sizes <- c(4,8,16,32)
layers<-list()
for(i in 1:length(layer_sizes)){
print(paste("layer", i, sep="_"))
nn_step_fraction = 2
nn_step_size <- floor(layer_sizes[i] / nn_step_fraction)
nn <- dmrscaler::n_nearest_window_scoring_func(indat = data, n_nearest = layer_sizes[i], step_size = nn_step_size, FDR = fdrscaler)
signn <- dmrscaler::determine_significant_windows(window_results=nn, indat=data, quants=cltable , quants_significance_cutoff = "0.99995" )
signn <- dmrscaler::add_significance(three_window_list =  signn, lookup_table = cltable)
layers[[i]]<-signn
}
names(layers)<-paste("layer", layer_sizes, sep="_")
for(i in 1:length(layers)){
temp<-as.data.frame(layers[[i]][[1]])
for(j in 2:length(layers[[i]])){
temp<-rbind(temp, layers[[i]][[j]])
}
layers[[i]]<-temp
}
atomic_layer <- data
for(i in 1:length(layers)){
for(k in 1:length(layers[[i]]$start_pos)){
layers[[i]]$start_index[k]<-which(atomic_layer$pos==layers[[i]]$start_pos[k] & as.character(atomic_layer$chr) == as.character(layers[[i]]$chr[k]))
layers[[i]]$stop_index[k]<-which(atomic_layer$pos==layers[[i]]$stop_pos[k] & as.character(atomic_layer$chr) == as.character(layers[[i]]$chr[k]))
}
}
built_layers <- list()
built_layers[[1]] <- in_layer_merge(dmrs = layers[[1]], CG_table = atomic_layer, FDR_scaler = fdrscaler, lookup_table = cltable)
for(i in 2:length(layers)){
print(i)
built_layers[[i]] <- build_next_layer(prev_layer = built_layers[[i-1]],
windows_to_layer = layers[[i]],
CG_table = atomic_layer,
FDR_scaler=fdrscaler,
lookup_table = cltable)
print("done with one")
}
built_layers
load(file="/home/lbondhus/Desktop/PROJECTS/KAT6A_DNA_methylation_project/intermediate_data/GRset.funnorm_NEW.Rdata")
pdat<- pData(GRset.funnorm)
B<-getBeta(GRset.funnorm)
locs<-mapToGenome(GRset.funnorm)
locs<-locs@rowRanges
Bsmall<-B #[1:1e5,]
locsmall <- locs #[1:1e5,]
locsmall<-as.data.frame(cbind(as.character(locsmall@ranges@NAMES),as.numeric(as.character(locsmall@ranges@start)),as.character(locsmall@seqnames)))
colnames(locsmall)<-c("names", "pos", "chr")
data<-data.frame(row.names = locsmall$names )
data$chr <- locsmall$chr
data$pos <- locsmall$pos
rim<-dmrscaler::generate_rand_index_matrix(num_controls = length( which(pdat$Sample_Group=="CONTROL" & !grepl("-2",pdat$Sample_Name))),
num_cases = length( which(pdat$Sample_Group=="Patient" & !grepl("-2",pdat$Sample_Name))),
num_permutations = 40)
mrp<-dmrscaler::run_MWW_rand_permutation(index_matrix = rim, Beta=Bsmall, num_permutations = 40)
mrp<- -log10(mrp)
mwr<-dmrscaler::run_MWW(control_indices = which(pdat$Sample_Group=="CONTROL" & !grepl("-2",pdat$Sample_Name)),
case_indices = which(pdat$Sample_Group=="Patient" & !grepl("-2",pdat$Sample_Name)),
Beta = Bsmall)
mwr<- -log10(mwr)
fdt<-dmrscaler::write_FDR_table(real_table = mwr, rand_table = mrp)
fdrscaler<-dmrscaler::get_FDR_scalar(MWW_FDR_table = fdt, MWW_FDR_threshold = 0.1)
cltable <- dmrscaler::write_CLT_lookup_table(num_reps = 1e5, data_to_sample = mwr$p_val, FDR_scaler = fdrscaler)
##------ Wed Mar  4 15:58:54 2020 ------##
##------ Wed Mar  4 16:06:04 2020 ------##
data<-data.frame(row.names = locsmall$names )
data$chr <- locsmall$chr
data$pos <- locsmall$pos
data$scoring_value <- mwr$p_val
### this is the part that will run in tandem or parallel
nn <- dmrscaler::n_nearest_window_scoring_func(indat = data, n_nearest = 4, step_size = 2, FDR = fdrscaler)
signn <- dmrscaler::determine_significant_windows(window_results=nn, indat=data, quants=cltable)
signn <- dmrscaler::add_significance(three_window_list =  signn, lookup_table = cltable)
###
layer_sizes <- c(4,8,16,32,64)
layers<-list()
for(i in 1:length(layer_sizes)){
print(paste("layer", i, sep="_"))
nn_step_fraction = 2
nn_step_size <- floor(layer_sizes[i] / nn_step_fraction)
nn <- dmrscaler::n_nearest_window_scoring_func(indat = data, n_nearest = layer_sizes[i], step_size = nn_step_size, FDR = fdrscaler)
signn <- dmrscaler::determine_significant_windows(window_results=nn, indat=data, quants=cltable , quants_significance_cutoff = "0.99995" )
signn <- dmrscaler::add_significance(three_window_list =  signn, lookup_table = cltable)
layers[[i]]<-signn
}
names(layers)<-paste("layer", layer_sizes, sep="_")
for(i in 1:length(layers)){
temp<-as.data.frame(layers[[i]][[1]])
for(j in 2:length(layers[[i]])){
temp<-rbind(temp, layers[[i]][[j]])
}
layers[[i]]<-temp
}
atomic_layer <- data
for(i in 1:length(layers)){
for(k in 1:length(layers[[i]]$start_pos)){
layers[[i]]$start_index[k]<-which(atomic_layer$pos==layers[[i]]$start_pos[k] & as.character(atomic_layer$chr) == as.character(layers[[i]]$chr[k]))
layers[[i]]$stop_index[k]<-which(atomic_layer$pos==layers[[i]]$stop_pos[k] & as.character(atomic_layer$chr) == as.character(layers[[i]]$chr[k]))
}
}
built_layers <- list()
built_layers[[1]] <- in_layer_merge(dmrs = layers[[1]], CG_table = atomic_layer, FDR_scaler = fdrscaler, lookup_table = cltable)
for(i in 2:length(layers)){
print(i)
built_layers[[i]] <- build_next_layer(prev_layer = built_layers[[i-1]],
windows_to_layer = layers[[i]],
CG_table = atomic_layer,
FDR_scaler=fdrscaler,
lookup_table = cltable)
print("done with one")
}
layers
View(built_layers)
View(built_layers)
View(built_layers[[1]])
View(built_layers[[5]])
View(built_layers[[4]])
built_layers[[1]]$stop_pos-built_layers[[1]]$stop_pos
built_layers[[1]]$stop_pos-built_layers[[1]]$start_pos
hist(built_layers[[1]]$stop_pos-built_layers[[1]]$start_pos)
max(built_layers[[1]]$stop_pos-built_layers[[1]]$start_pos)
which.max(built_layers[[1]]$stop_pos-built_layers[[1]]$start_pos)
built_layers[[1]]$stop_pos[235]-built_layers[[1]]$start_pos[235]
built_layers[[1]][235,]
hist(built_layers[[1]]$stop_pos-built_layers[[1]]$start_pos)
hist(built_layers[[2]]$stop_pos-built_layers[[2]]$start_pos)
hist(built_layers[[3]]$stop_pos-built_layers[[3]]$start_pos)
hist(built_layers[[2]]$stop_pos-built_layers[[2]]$start_pos, breaks=50)
hist(built_layers[[3]]$stop_pos-built_layers[[3]]$start_pos, breaks=50)
hist(built_layers[[2]]$stop_pos-built_layers[[2]]$start_pos, breaks=50)
hist(built_layers[[5]]$stop_pos-built_layers[[5]]$start_pos, breaks=50)
hist(built_layers[[2]]$stop_pos-built_layers[[2]]$start_pos, breaks=50)
hist(built_layers[[5]]$stop_pos-built_layers[[5]]$start_pos, breaks=50)
hist(log10(built_layers[[5]]$stop_pos-built_layers[[5]]$start_pos))
hist(log10(built_layers[[5]]$stop_pos-built_layers[[5]]$start_pos), breaks=50)
hist(log10(built_layers[[5]]$numCG), breaks=50)
hist(built_layers[[5]]$numCG, breaks=50)
pwd()
getwd)_
getwd()
